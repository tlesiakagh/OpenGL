#include <glew.h>
#include <glfw3.h>

#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <numeric>


void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);

using namespace std;

// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;
double* verticesF;

const char* vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"void main()\n"
"{\n"
"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
"}\0";

const char* fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n"
"}\n\0";

// vector<float> <- parametry i data będą tym
vector<double> getDrawDataFromFile(fstream& dataFile, int& ncols, int& nrows, int& nodataValue) {
    int lineNum = 1;
    int counter = 1;
    size_t startPos = 0, endPos;
    string token, data, delim = " ";
    double tmp;
    vector<double> valuesFromFile;

    //vector<int, int> noOfDataInLines;

    while (getline(dataFile, data))
    {
        if (lineNum < 7) {
            // Czytaj parametry do zmiennych

            endPos = data.find(delim);
            startPos = endPos + delim.length();
            token = data.substr(startPos, data.length() - startPos);

            switch (lineNum)
            {
            case 1:
                ncols = stoi(token);
                break;
            case 2:
                nrows = stoi(token);
                break;
            case 6:
                nodataValue = stoi(token);
                break;
            default:
                //cout << token << endl;
                break;
            }

            lineNum++;
        }
        else {
            // Czytaj dane do tablicy
            delim = "  ";
            startPos = 0;
            endPos = data.find(delim);
            counter = 1;
            do {
                token = data.substr(startPos, endPos - startPos);
                startPos = endPos + delim.length();
                endPos = data.find(delim, startPos);
                tmp = atof(token.c_str());
                valuesFromFile.push_back(tmp);
                //cout << token << " ";
                //cout << atof(token.c_str()) <<  " ";
                counter++;
                if (counter == 2274) {
                    //cout << token << " ";
                }
            } while (counter <= ncols);//token == "-9999"   endPos != string::npos
            //cout << "Number of data in line " << lineNum << " -> " << counter << endl;
            lineNum++;
        }
    }

    return valuesFromFile;
}

vector<double> normalize(vector<double> valuesFromFile, double oldMin, double oldMax) {
    // normalizacja

    for (int i = 0; i < valuesFromFile.size(); i++) {
        valuesFromFile[i] = (((valuesFromFile[i] - oldMin) / (oldMax - oldMin)) * (1 - (-1))) + (-1);
    }

    //x' = (((x - min)/(max - min)) * (newmax-newmin)) + newmin
    return valuesFromFile;
}

void prepareVertices() {
    int ncols, nrows, nodataValue;
    vector<double> valuesFromFile, X, Y, Z;

    fstream dataFile;
    dataFile.open("draw_data/test.asc", ios::in);

    vector <string> params;

    if (dataFile.is_open()) {

        valuesFromFile = getDrawDataFromFile(dataFile, ncols, nrows, nodataValue);

        cout << "nrows: " << nrows << " ncols: " << ncols << " nodataValue: " << nodataValue << endl;

        //cout << "ValuesFromFile: " << endl;
        for (int i = 0; i < valuesFromFile.size(); i++) {
            //cout << valuesFromFile[i];
        }

        dataFile.close();

        double valuesFromFileMin = *min_element(valuesFromFile.begin(), valuesFromFile.end());
        double valuesFromFileMax = *max_element(valuesFromFile.begin(), valuesFromFile.end());

        //cout << "min: " << *min_element(valuesFromFile.begin(), valuesFromFile.end()) << endl;
        //cout << "max: " << *max_element(valuesFromFile.begin(), valuesFromFile.end()) << endl;

        vector<double> nrowsData(nrows), ncolsData(ncols);

        // Wypełnia wektory X, ncolsData wartościami z przedziałów [1, nrows], [1, ncols]
        std::iota(nrowsData.begin(), nrowsData.end(), 1);
        std::iota(ncolsData.begin(), ncolsData.end(), 1);

        //cout << "nrowsData[0] = " << nrowsData[0] << " nrowsData[last] = " << nrowsData[nrowsData.size() - 1] << endl;
        //cout << "ncolsData[0] = " << ncolsData[0] << " ncolsData[last] = " << ncolsData[ncolsData.size() - 1] << endl;

        // TO DO
        // 1. Ładowanie z 3(?) vectorów do jednej tablicy verticesF, którą potem wykorzystam do rysowania

        X = normalize(nrowsData, 1, nrows);
        Y = normalize(valuesFromFile, valuesFromFileMin, valuesFromFileMax);
        Z = normalize(ncolsData, 1, ncols);

        //auto Ymax = max_element(Y.begin(), Y.end());
        //auto max = max_element(valuesFromFile.begin(), valuesFromFile.end());

        //cout << "X[0] = " << X[0] << " X[last] = " << X[X.size() - 1] << endl;
        //cout << "min = " << *min_element(valuesFromFile.begin(), valuesFromFile.end()) << " max = " << *max << " pos " << std::distance(valuesFromFile.begin(), max) << endl;
        //cout << "Ymin = " << *min_element(Y.begin(),Y.end()) << " Ymax = " << *Ymax << " pos " << std::distance(Y.begin(), Ymax) << endl;
        //cout << "Z[0] = " << Z[0] << " Z[last] = " << Z[Z.size() - 1] << endl;

        //cout << X.size() << " " << Z.size() << " " << Y.size() << " " << X.size() * Z.size() << endl;
        //cout << valuesFromFile[193] << valuesFromFile[194] << valuesFromFile[440952] << endl;

        verticesF = (double*)calloc(valuesFromFile.size(), sizeof(double));
        int verticesFIndex = 0;

        for (int row = 193; row < nrows; row++) {
            for (int col = 0; col < ncols; col++) {
                verticesFIndex = (row * ncols) + col;
                //cout << verticesFIndex << endl;

                switch (verticesFIndex % 3) {
                case 1:
                    verticesF[verticesFIndex] = X[row];
                    //cout << "X" << verticesF[verticesFIndex] << ", ";
                    break;
                case 2:
                    verticesF[verticesFIndex] = Y[verticesFIndex];
                    //cout << "Y" << verticesF[verticesFIndex] << "; ";
                    break;
                case 0:
                    verticesF[verticesFIndex] = Z[col];
                    //cout << "Z" << verticesF[verticesFIndex] << "'";
                    break;
                }

            }
        }
    }
    else {
        cout << "Nie udało się otworzyć pliku!" << endl;
    }
}

int main()
{
    prepareVertices();
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

    // glfw window creation
    // --------------------
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    // GLEW: load all OpenGL function pointers
    // --------------------------------------
    GLenum err = glewInit();

    if (err != GLEW_OK)
    {
        // Problem: glewInit failed, something is seriously wrong.
        fprintf(stderr, "ERROR: %s\n", glewGetErrorString(err));
    }

    fprintf(stdout, "Status: Using GLEW %s\n", glewGetString(GLEW_VERSION));

    // build and compile our shader program
    // ------------------------------------
    // vertex shader
    unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);
    // check for shader compile errors
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // fragment shader
    unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);
    // check for shader compile errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // link shaders
    unsigned int shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);
    // check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    }
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    // set up vertex data (and buffer(s)) and configure vertex attributes
    // ------------------------------------------------------------------
    float vertices[] = {
         0.5f,  0.5f, 0.0f,  // top right
         0.5f, -0.5f, 0.0f,  // bottom right
        -0.5f, -0.5f, 0.0f,  // bottom left
        -0.5f,  0.5f, 0.0f   // top left 
    };
    unsigned int indices[] = {  // note that we start from 0!
        0, 1, 3,  // first Triangle
        1, 2, 3,
        4, 5190, 10200,
        5, 5191, 10201,
        6, 5192, 10202,
        7, 5193, 10203,
        8, 5194, 10204,
        9, 5195, 10205,
        10, 5196, 10206
    };
    unsigned int VBO, VAO, EBO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    glGenBuffers(1, &EBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(verticesF), verticesF, GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // remember: do NOT unbind the EBO while a VAO is active as the bound element buffer object IS stored in the VAO; keep the EBO bound.
    //glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);


    // uncomment this call to draw in wireframe polygons.
    //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

    glEnable(GL_DEPTH_TEST);

    // render loop
    // -----------
    while (!glfwWindowShouldClose(window))
    {
        // input
        // -----
        processInput(window);

        // render
        // ------
        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        // draw our first triangle
        glUseProgram(shaderProgram);
        glBindVertexArray(VAO); // seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized
        //glDrawArrays(GL_TRIANGLES, 0, 6);
        glDrawElements(GL_TRIANGLES, 18, GL_UNSIGNED_INT, 0);
        // glBindVertexArray(0); // no need to unbind it every time 

        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        // -------------------------------------------------------------------------------
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // optional: de-allocate all resources once they've outlived their purpose:
    // ------------------------------------------------------------------------
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteBuffers(1, &EBO);
    glDeleteProgram(shaderProgram);

    // glfw: terminate, clearing all previously allocated GLFW resources.
    // ------------------------------------------------------------------
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    // make sure the viewport matches the new window dimensions; note that width and 
    // height will be significantly larger than specified on retina displays.
    glViewport(0, 0, width, height);
}